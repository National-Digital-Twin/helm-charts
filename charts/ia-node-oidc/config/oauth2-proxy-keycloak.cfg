email_domains = [ "{{.Values.oidcProvider.configMap.email_domains }}" ]
cookie_expire="5m"
cookie_refresh="4m"
cookie_secure = "true"
cookie_domains = [ "{{.Values.oidcProvider.configMap.cookie_domains }}" ]
upstreams = [ "static://200" ]
whitelist_domains = [ "{{.Values.oidcProvider.configMap.whitelist_domains }}" ]
redirect_url = "{{.Values.oidcProvider.configMap.redirect_url }}"
oidc_issuer_url = "{{.Values.oidcProvider.configMap.issuer_url }}"
provider = "keycloak-oidc"
errors_to_info_log = "{{.Values.oidcProvider.configMap.logging_enabled }}"
standard_logging = "{{.Values.oidcProvider.configMap.logging_enabled }}"
request_logging = "{{.Values.oidcProvider.configMap.logging_enabled }}"
silence_ping_logging = "{{.Values.oidcProvider.configMap.logging_enabled }}"
auth_logging = "true"
code_challenge_method = "S256"
provider_display_name = "Keycloak"
api_routes = ["/api/.*$"] # return HTTP 401 instead of redirecting to authentication, as api's should provide jwt in the request, we don't want to redirect to the log in page
set_authorization_header = "true"
set_xauthrequest = "true"
scope = "openid email groups profile" # we need to ensure the email and groups are also included in the scope
reverse_proxy = "true"
skip_provider_button = "true"
pass_access_token = "true"
skip_jwt_Bearer_tokens = "true" # will skip requests that have verified JWT Bearer tokens (the token must have aud that matches this client id)